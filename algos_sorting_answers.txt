>1.Write pseudocode for bubble sort.
 
```
FUNCTION bubbleSort(collection)
   REPEAT
     SET swapped to false
     FOR i = FIRST INDEX of collection to LAST INDEX of collection - 1
       IF collection[i] > collection[i + 1] THEN
         SET tmp to collection[i]
         SET collection[i] to collection[i + 1]
         SET collection[i + 1] to tmp
         SET swapped to true
       END IF
     END FOR
   UNTIL swapped is FALSE
   RETURN collection
END FUNCTION
```

>2.Write pseudocode for quicksort.

```
FUNCTION partition(array, low, high)
	SET pivot = array[high]
	SET i = (low - 1)
	FOR (j = low; j < high; j++)
	   IF (array[j] <= pivot)
		i++
	   	SET temp = array[j]
		array[i] = array[j]
		array[j] = temp
	   END IF
	END FOR

	SET temp = array[i +1]
	array[i + 1] = array[high]
	array[high] = temp
	return i + 1
END FUNCTION
FUNCTION quickSort(array, low, high)
	IF (low < high)
	  SET pi = partition(array, low, highz0
          CALL quickSort(array, low, pi - 1)
	  CALL quickSort(array, pi + 1, high)
END FUNCTION

```

>3.We talked about time complexity in a previous checkpoint, and how to get an idea of the efficiency of an algorithm. 
After looking at the pseudocode for the above sorting methods, identify why merge sort and quick sort are much more 
efficient than the others. Walking through each algorithm with a few sample collections may help.

A: Merge sort is efficient because it can handle large collections but it doesn't interate through every item. It breaks everything up into sub-collections then merges them back together.

Quick sort is efficient because it can handle large collections using less memory and the divide and conquer method, so it doesn't interate over every item.   

>4.All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket sort and explain how it works. What is the ideal input for bucket sort?

A: Bucket sort starts with the ideal input of an unsorted array. Set up an array of empty buckets and we place our input into the buckets depending on the inputs range. Sort the items in the bucket, and place back in original array
 

