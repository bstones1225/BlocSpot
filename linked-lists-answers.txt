###Questions

>1.What are some pros and cons of using linked lists instead of arrays?

A: Linked lists have to go from the beginning then thru each element. Arrays are indexed and can be found thru the index.

>2.Come up with a real world example of a linked list.

A: History in web browsers use linked list so when you press back, the previous node data is used.

>1.The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

A: The explanation is that you aren't looping and walking through the link to find the end.

```
FUNCTION push(element)
CREATE node
SET node.value TO element
SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head
 **WHILE(current.next != null)**
 **	current = current.next**
   SET current.next to node 
END IF
END FUNCTION
```

```
function LinkedList () {
    this.head = null;
}
LinkedList.prototype.insertNodeAtTail = function (val) {
    var node = {
        data: val,
        next:null
    };

    if (!this.head) {
        this.head = node;
    } else {
        var p1 = this.head;
        while (p1.next) {
            p1 = p1.next;
        }
        p1.next = node;
    }
};


LinkedList.prototype.removeDuplicates = function () {
    // Empty or a single element Linked List
    if (!this.head || !this.head.next) {
      console.log('No duplicates were found. Empty or a single element Linked List.');
      return;
    }

    var p1;
    var p2;
    var nodes = {};

    p1 = this.head;
    p2 = p1.next;
    nodes[p1.data] = true;

    while (p2) {
        var data = p2.data;
        if (nodes[data]) {
            p1.next = p2.next;
        } else {
            nodes[data] = true;
            p1 = p2;
        }
        p2 = p2.next;
    }
};

LinkedList.prototype.reverse = function () {
    var current;
    var prev;
    var next;
    
    current = this.head;
    prev = null;
    next = null;
    while(current !== null ){
        next = current.next;
        current.next = prev;
        prev = current;
        current = next;
    }
    this.head = prev;
};

// Base case : No duplicates
var L1 = new LinkedList();
L1.insertNodeAtTail(5);

L1.removeDuplicates();
console.log(L1);

// Two nodes with duplicates
var L2 = new LinkedList();
L2.insertNodeAtTail(5);
L2.insertNodeAtTail(5);

L2.removeDuplicates();
console.log(L2);

// Two nodes without duplicates
var L3 = new LinkedList();
L3.insertNodeAtTail(5);
L3.insertNodeAtTail(6);

L3.removeDuplicates();
console.log(L3);

// Remove duplicates at the end
var L4 = new LinkedList();
L4.insertNodeAtTail(5);
L4.insertNodeAtTail(6);
L4.insertNodeAtTail(7);
L4.insertNodeAtTail(8);
L4.insertNodeAtTail(5);

L4.removeDuplicates();
console.log(L4);

// Remove multiple duplicates from middle
var L5 = new LinkedList();
var testData = [5,6,7,5,5,8];
testData.forEach(el => L5.insertNodeAtTail(el));

L5.removeDuplicates();
console.log(L5);

var L6 = new LinkedList();
L6.insertNodeAtTail(5);
L6.insertNodeAtTail(6);
L6.insertNodeAtTail(7);
L6.insertNodeAtTail(8);
L6.insertNodeAtTail(9);




console.log(L6);
L6.reverse();
console.log(L6);
```