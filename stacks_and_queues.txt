###Exercises

>1.What is the main difference between a stack and a queue?

A: Stack is last-in-first-out, queue is first-in-first-out

>2.What are the similarities between stacks and queues?

A: They are abstract data types

>3.Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

A: Id use a Stack for UNDO because you could take the last-in, first out to get the last saved snapshot of the changes. For REDO, Id use it in a Queue because the more changes you made, the more snapshots would be added. Eventually, the oldest snapshot of the changes would be the first to leave, using the first-in-first-out

###Programming Questions

>1.Given a string, reverse it using a stack. For example, the string `"Bloc!"` should be converted to `"!colB"`.

```
var reverseStr = "";

var reverse = function(string) {
    for (var i = string.length-1 ;i>=0;i--){
        console.log(i);
        console.log(string.length);
    reverseStr += string[i];
    
    }
};
reverse("Bloc!");
console.log(reverseStr); 
```

>2.Implement the `pop` method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

```
var queueList = [];

var push = function(string){
    for (var i = 0; i < string.length; i++){
        queueList.push(string[i]);
    }
};
var pop = function(){
        var popped = queueList.pop();
        
};
var first = function(){
    return queueList[0]; 
};

var last = function(){
    return queueList[queueList.length-1];
};

push(["Bloc", "Test Name"]);
console.log(first());
console.log(last());
console.log(queueList);
pop();
console.log(queueList);
push(["Brian", "Stones"]);
console.log(first());
console.log(last());
console.log(queueList);
pop();
console.log(queueList);
```

>1.Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

```
CLASS QUEUE

	FUNCTION last
		return array[array.length - 1]
	END FUNCTION

	FUNCTION first
		return array[0]
	END FUNCTION

	FUNCTION length
		return array.length
	END FUNCTION

	FUNCTION enqueue (element)
		return array.push(element)
	END FUNCTION

	FUNCTION dequeue
		var temp = first()
		array.pop()
		return temp
	END FUNCTION
END CLASS
```